}
for(i in 31:48) {
data[i,2] <- c(4)
}
for(i in 49:54) {
data[i,2] <- c(5)
}
data
corr(data[,1], data[,2])
cor(data[,1], data[,2])
p <- function(beta, sigma2, y, x, log = FALSE) {
logp <- (-length(y)-2)*log(sigma2)/ 2 - 1/(2*sigma2) * crossprod(y-x%*%beta)
if(log) return(logp)
return(exxp(logp))
}
rwsampler <- function(y, x, beta0, sigma20, propvar, K) {
alpha y- runif(K)
beta<- matrix(nrow = ncol(x), ncol = K+1)
sigma2 <- numeric(length = K+1)
beta[,1] <- beta0
sigma2[1] <-sigma20
accept <- logical(length = K)
require(truncnorm)
log_q <- function(beta, sigma2, mean_beta, mean_sigma2) {
log_q_sigma2<- log(dtruncnorm(sigma2, a = 0,
mean = mean_sigma2,
sd = sqrt(propvar)))
log_q_sigma2
}
for(i in 2:(K+1)) {
beta_star <- rnorm(ncol(x),
mean = beta[, i-1], sd = sqrt(propvar))
sigma2_star <- rtruncnorm(1, a = 0, mean = sigma2[i-1],
sd = sqrt(propvar))
p_star <- p(beta_star, sigma2_star, y, x, log = TRUE)
q_star <- log_q(beta_star, sigma2_star, beta[, i-1],
sigma2[i-1])
p_old <- p(beta[, i-1], sigma2[i-1], y, x, log = TRUE)
q_old <- log_q(beta[,  i-1], sigma2[i-1], beta_star,
sigma2_star)
if(alpha[i-1] <= exp(p_star-p_old + q_old-q_star)) {
beta[, i] <- beta_star
sigma2[i] <- sigma2_star
accept[i-1] <- TRUE
} else {
beta[, i] <- beta[, i-1]
sigma2[i] <-sigma2[i-1]
accept[i-1] <- FALSE
}
}
print(paste('acceptance rate:', mean(accept)))
rownames(beta) <- colnames(x)
return(rbind(beta, sigma2 = sigma2))
}
rwsampler <- function(y, x, beta0, sigma20, propvar, K) {
alpha <- runif(K)
beta<- matrix(nrow = ncol(x), ncol = K+1)
sigma2 <- numeric(length = K+1)
beta[,1] <- beta0
sigma2[1] <-sigma20
accept <- logical(length = K)
require(truncnorm)
log_q <- function(beta, sigma2, mean_beta, mean_sigma2) {
log_q_sigma2<- log(dtruncnorm(sigma2, a = 0,
mean = mean_sigma2,
sd = sqrt(propvar)))
log_q_sigma2
}
for(i in 2:(K+1)) {
beta_star <- rnorm(ncol(x),
mean = beta[, i-1], sd = sqrt(propvar))
sigma2_star <- rtruncnorm(1, a = 0, mean = sigma2[i-1],
sd = sqrt(propvar))
p_star <- p(beta_star, sigma2_star, y, x, log = TRUE)
q_star <- log_q(beta_star, sigma2_star, beta[, i-1],
sigma2[i-1])
p_old <- p(beta[, i-1], sigma2[i-1], y, x, log = TRUE)
q_old <- log_q(beta[,  i-1], sigma2[i-1], beta_star,
sigma2_star)
if(alpha[i-1] <= exp(p_star-p_old + q_old-q_star)) {
beta[, i] <- beta_star
sigma2[i] <- sigma2_star
accept[i-1] <- TRUE
} else {
beta[, i] <- beta[, i-1]
sigma2[i] <-sigma2[i-1]
accept[i-1] <- FALSE
}
}
print(paste('acceptance rate:', mean(accept)))
rownames(beta) <- colnames(x)
return(rbind(beta, sigma2 = sigma2))
}
data('longley')
clongley <- scale(longley, scale = FALSE)
y <- clongley[, 'GNP']
x <- clongley[, c('Employed', 'Population')]
K <- 2000
lm_fit <- lm(y ~-1 +x )
beta0 <- coef(lm_fit)
sigma20 <- sigma(lm_fit)^2
propvar <- 4^seq(-3,2)
y <- clongley[, 'GNP']
x <- clongley[, c('Employed', 'Population')]
K <- 2000
lm_fit <- lm(y ~-1 +x )
beta0 <- coef(lm_fit)
sigma20 <- sigma(lm_fit)^2
propvar <- 4^seq(-3,2)
sdet.seed(9384)
set.seed(9384)
samples <- lapply(propvar, rwsampler, y = y, x = x,
betaß = beta0, sigma20  = sigma20, K = K)
samples <- lapply(propvar, rwsampler, y = y, x = x,
beta0 = beta0, sigma20  = sigma20, K = K)
install.packages('truncnorm')
samples <- lapply(propvar, rwsampler, y = y, x = x,
beta0 = beta0, sigma20  = sigma20, K = K)
alpha
rwsampler$alpha
names(samples) <- pasteß('propvar_', round(propvar, 2))
names(samples) <- paste0('propvar_', round(propvar, 2))
K <- 20000
samples <- lapply(propvar, rwsampler, y = y, x = x,
beta0 = beta0, sigma20  = sigma20, K = K)
samples <- lapply(samples, function(x), x[, -c[1:1000]])
samples <- lapply(samples, function(x), x[, -c(1:1000)])
samples <- lapply(samples, function(x) x[, -c(1:1000)])
)
for(s in names(samples)) matplot(t(samples[[s]][-3,1:1000]),
t = '1', main = s)
for(s in names(samples)) matplot(t(samples[[s]][-3,1:1000]),
t = '1', main = s)
for(s in names(samples)) matplot(t(samples[[s]][-3,1:1000]),
t = 'l', main = s)
for(s in names(samples)) matplot(t(samples[[s]][-3,1:1000]),
t = 'l', main = s)
library(ggplot2)
library(dplyr)
install.packages('LaplacesDemon')
sample_dat <- lapply(samples, function(x) as.data.frame(t(x[, -(1:200)])))
sample_dat <- lapply(samples, function(x) as.data.frame(t(x[, -(1:200)])))
sample_dat <- bind_rows(sample_dat, .id = 'propvar')
ggplot(sample_dat, aes(x= Employed, y = Population)) +
geom_bin2d() + facet_wrap(propvar) + coord_fixed()
library(LaplacesDemon)
grid <- with(sample_data, expand.grid(
Employed = seq(min(Employed), maxEmployed), len = 40),
Population = seq(min(Population), max(Population, len = 40))
))
Employed = seq(min(Employed), maxEmployed), len = 40),
Population = seq(min(Population), max(Population, len = 40))
grid <- with(sample_dat, expand.grid(
install.packages('StatML')
install.packages('SpatialML')
d = c(1,2,3,4,1,2)
x = 3
x = c(NA, 3)
d = c(1,2,3,4,1,2)
x = c(NA, 3)
x = c(3, NA)
d = c(1,2,3,4,1,2)
x = c(3, NA)
x = c(3, rep(NA,3))
x
d
d = c(1,1,2)
x = c(3, rep(NA,3))
for i in 1:3 {
x[i+1] = x[i] + d[i]
}
for i in length(3) {
x[i+1] = x[i] + d[i]
}
for(i in 1:3) {
x[i+1] = x[i] + d[i]
}
x
d = c(1,1,2)
x = c(3, rep(NA,3))
x
mu = c(172.7, 104.6, 104.0, 93.8)
mu
mu = vector(mode = 'numeric')
mu = c(172.7, 104.6, 104.0, 93.8)
mu
class(mu)
dim(mu)
mu = Vectorize(mu)
mu = matrix(data = mu, nrow = 4, ncol = 1)
mu
sigma = matrix(c(1037.2, -80.2, 1430.7, 271.44, -80.2, 219.84,
92.10, -91.58, 1430.7, 92.1, 2624.0, 210.30,
271.44, -91.58, 210.30, 177.36),
nrow = 4, ncol = 4)
sigma
solve(sigma)
inv(sigma)
sigma22 = sigma[2:4, 2:4]
sigma22
sigma11 = sigma[1,1]
sigma11
sigma12 = sigma21 = sigma[2:4,1]
sigma12
sigma21
sigma11.2 = sigma11 - sigma12*solve(sigma22)*sigma21
sigma11.2
sigma11.2 = sigma11 - sigma12%*%solve(sigma22)%*%sigma21
sigma11.2
x = seq(1,10, length.out = 20)
t = seq(1,10, length.out = 20)
xt = [-2, 2, 3, -3, -7, 7, -1, 1]
n <- 1000
lambda <- 5
x <- rexp(n, lambda)
?rexp
y<- 1-exp(-lambda)
table(y)
n <- 1000
lambda <- 5
x <- rexp(n, lambda)
y<- 1-exp(-lambda)
table(y)
y<- 1-exp(-lambda*x)
table(y)
sum(table(y))
F_y <- cumsum(table(y))/sum(table(y))
F_y
par(mfrow = c(1,3))
hist(x, col = 'blue')
plot(F_y, col = 'green', xlab = 'y', ylab = expressiom('F'['Y']),
main = expression(paste('Y=1-e'^paste('-', lambda, 'X'))))
plot(F_y, col = 'green', xlab = 'y', ylab = expression('F'['Y']),
main = expression(paste('Y=1-e'^paste('-', lambda, 'X'))))
ylab = expression('F'['Y'])
expression('F'['Y'])
plot(F_y, col = 'green', xlab = 'y', ylab = expression('F'['Y']),
main = expression(paste('Y=1-e'^paste('-', lambda, 'X'))))
par(mfrow = c(1,3))
hist(x, col = 'blue')
plot(F_y, col = 'green', xlab = 'y', ylab = expression('F'['Y']),
main = expression(paste('Y=1-e'^paste('-', lambda, 'X'))))
?ecdf
hist(x, col = 'blue')
plot(F_y, col = 'green', xlab = 'y', ylab = expression('F'['Y']),
main = expression(paste('Y=1-e'^paste('-', lambda, 'X'))))
par(mfrow = c(1,3))
hist(x, col = 'blue')
plot(F_y, col = 'green', xlab = 'y', ylab = expression('F'['Y']),
main = expression(paste('Y=1-e'^paste('-', lambda, 'X'))))
plot(ecdf(y), col = 'red', pch = 19, xlab = 'y', ylab = 'ECDF(y)')
n_circles <- 50
library(mlbench)
#concentric circles
library(mlbench)
data.circle = mlbench.circle(1000, d = 2)
plot(data.circle, main = 'Circle')
data.circle = mlbench.circle(1000, d = 3)
plot(data.circle, main = 'Circle')
data.circle = mlbench.circle(500, d =2)
plot(data.circle, main = 'Circle')
?data.circle
?mlbench.circle
data.circle = mlbench.circle(500, d =4)
plot(data.circle, main = 'Circle')
data.circle = mlbench.circle(500, d =2)
plot(data.circle, main = 'Circle')
jpeg('circle.jpg')
jpeg('circle.jpg')
data.circle = mlbench.circle(500, d =2)
plot(data.circle, main = 'Circle')
?data.circle
dev.off()
getwd()
install.packages('NCutXY')
install.packages('NCutYX')
library('NCutYX')
?ncut
install.packages('factoextra')
install.packages("factoextra")
install.packages("factoextra")
install.packages('installr')
library(installr)
updateR()
n <- 1000
lambda <- 5
x <- rexp(n, lambda)
y = 1- exp(-lambda*x)
F <- cumsum(table(y)/sum(table(y)))
F
x <- runif(100)
z <- runif(100)
x=z
x <- runif(100)
z <- runif(100)
x==z
x
ks.test(x,z)
rm(list = ls())
library(rjson)
library(dplyr)
library(tidyr)
library(imputeTS)
setwd('D:/Academics/Academics/MEMS/Semester 3/Non-Semi PM/Research/Time varying kernel densities')
data_dax <- read.csv('data/DAX.csv', head = TRUE)
data_dax <- data_dax %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>% as.data.frame()
data_btc <- read.csv('data/btc.csv', head = TRUE)
data_dow <- read.csv('data/dowjones.csv', head = TRUE)
data_dow <- data_dow[which(data_dow$Adj.Close != 'null'),]
data_dow$Open <- as.numeric(data_dow$Open)
data_dow$High <- as.numeric(data_dow$High)
data_dow$Low <- as.numeric(data_dow$Low)
data_dow$Close <- as.numeric(data_dow$Close)
data_dow$Adj.Close <- as.numeric(data_dow$Adj.Close)
data_dow$Volume <- as.numeric(data_dow$Volume)
data_dow <- data_dow %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>% as.data.frame()
data_nq <- read.csv('data/nasdaq.csv', head = TRUE)
data_nq <- data_nq[which(data_nq $Adj.Close != 'null'),]
data_nq$Open <- as.numeric(data_nq$Open)
data_nq$High <- as.numeric(data_nq$High)
data_nq$Low <- as.numeric(data_nq$Low)
data_nq$Close <- as.numeric(data_nq$Close)
data_nq$Adj.Close <- as.numeric(data_nq$Adj.Close)
data_nq$Volume <- as.numeric(data_nq$Volume)
data_nq <- data_nq %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>%
as.data.frame()
data_snp <- read.csv('data/snp500.csv', head = TRUE)
data_snp <- data_snp[which(data_snp$Adj.Close != 'null'),]
data_snp <- data_snp %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>%
as.data.frame()
result<- jsonlite::fromJSON('data/crix.json')
data_crix <- as.data.frame(result)
data_crix = data_crix[1616:2346,]
#imputation
imputed_dax <- sapply(data_dax[,2:7], na_ma, k=4)
data_dax[,2:7] <- imputed_dax
head(data_dax)
imputed_dow <- sapply(data_dow[,2:7], na_ma, k=4)
data_dow[,2:7] <- imputed_dow
imputed_nq <- sapply(data_nq[,2:7], na_ma, k=4)
data_nq[,2:7] <- imputed_nq
imputed_snp <- sapply(data_snp[,2:7], na_ma, k=4)
data_snp[,2:7] <- imputed_snp
#computing returns
data_crix$returns = 0
for(i in 2:nrow(data_crix)) {
data_crix$returns[i]<-(data_crix$price[i]-data_crix$price[i-1])/data_crix$price[i-1]*100
}
data_crix =data_crix %>% mutate(returns_abs=abs(returns-mean(returns)),
returns_sq = (returns - mean(returns))^2,
returns_cube = (returns -mean(returns))^3)
returns <- function(data) {
data$returns <- 0
for(i in 2:nrow(data)) {
data$returns[i]<-(data$Adj.Close[i]-data$Adj.Close[i-1])/data$Adj.Close[i-1]*100
}
data <- data %>% mutate(returns_abs = abs(returns-mean(returns)),
returns_sq = (returns - mean(returns))^2,
returns_cube = (returns -mean(returns))^3)
return(data)
}
data_dax <- returns(data_dax)
data_btc <- returns(data_btc)
data_nq <- returns(data_nq)
data_dow <- returns(data_dow)
data_snp <- returns(data_snp)
#saving amended datasets
write.csv(data_dax,'returns_dax.csv')
rm(list=ls())
library(dgof)
library(LaplacesDemon)
setwd('D:/Academics/Academics/MEMS/Semester 3/Non-Semi PM/Research/KDE-finance-COVID-19-main')
resid<- read.csv('data/residuals.csv')
rm(list = ls())
library(rjson)
library(dplyr)
library(tidyr)
library(imputeTS)
setwd('D:/Academics/Academics/MEMS/Semester 3/Non-Semi PM/Research/Time varying kernel densities')
data_dax <- read.csv('data/DAX.csv', head = TRUE)
data_dax <- data_dax %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>% as.data.frame()
data_btc <- read.csv('data/btc.csv', head = TRUE)
data_dow <- read.csv('data/dowjones.csv', head = TRUE)
data_dow <- data_dow[which(data_dow$Adj.Close != 'null'),]
data_dow$Open <- as.numeric(data_dow$Open)
data_dow$High <- as.numeric(data_dow$High)
data_dow$Low <- as.numeric(data_dow$Low)
data_dow$Close <- as.numeric(data_dow$Close)
data_dow$Adj.Close <- as.numeric(data_dow$Adj.Close)
data_dow$Volume <- as.numeric(data_dow$Volume)
data_dow <- data_dow %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>% as.data.frame()
data_nq <- read.csv('data/nasdaq.csv', head = TRUE)
data_nq <- data_nq[which(data_nq $Adj.Close != 'null'),]
data_nq$Open <- as.numeric(data_nq$Open)
data_nq$High <- as.numeric(data_nq$High)
data_nq$Low <- as.numeric(data_nq$Low)
data_nq$Close <- as.numeric(data_nq$Close)
data_nq$Adj.Close <- as.numeric(data_nq$Adj.Close)
data_nq$Volume <- as.numeric(data_nq$Volume)
data_nq <- data_nq %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>%
as.data.frame()
data_snp <- read.csv('data/snp500.csv', head = TRUE)
data_snp <- data_snp[which(data_snp$Adj.Close != 'null'),]
data_snp <- data_snp %>% mutate(Date = as.Date(Date)) %>%
complete(Date = seq.Date(min(Date), max(Date), by = 'day')) %>%
as.data.frame()
result<- jsonlite::fromJSON('data/crix.json')
data_crix <- as.data.frame(result)
data_crix = data_crix[1616:2346,]
#imputation
imputed_dax <- sapply(data_dax[,2:7], na_ma, k=4)
data_dax[,2:7] <- imputed_dax
head(data_dax)
imputed_dow <- sapply(data_dow[,2:7], na_ma, k=4)
data_dow[,2:7] <- imputed_dow
imputed_nq <- sapply(data_nq[,2:7], na_ma, k=4)
data_nq[,2:7] <- imputed_nq
imputed_snp <- sapply(data_snp[,2:7], na_ma, k=4)
data_snp[,2:7] <- imputed_snp
#computing returns
data_crix$returns = 0
for(i in 2:nrow(data_crix)) {
data_crix$returns[i]<-(data_crix$price[i]-data_crix$price[i-1])/data_crix$price[i-1]*100
}
data_crix =data_crix %>% mutate(returns_abs=abs(returns-mean(returns)),
returns_sq = (returns - mean(returns))^2,
returns_cube = (returns -mean(returns))^3)
returns <- function(data) {
data$returns <- 0
for(i in 2:nrow(data)) {
data$returns[i]<-(data$Adj.Close[i]-data$Adj.Close[i-1])/data$Adj.Close[i-1]*100
}
data <- data %>% mutate(returns_abs = abs(returns-mean(returns)),
returns_sq = (returns - mean(returns))^2,
returns_cube = (returns -mean(returns))^3)
return(data)
}
data_dax <- returns(data_dax)
data_btc <- returns(data_btc)
data_nq <- returns(data_nq)
data_dow <- returns(data_dow)
data_snp <- returns(data_snp)
library(dgof)
library(LaplacesDemon)
setwd('D:/Academics/Academics/MEMS/Semester 3/Non-Semi PM/Research/KDE-finance-COVID-19-main')
resid<- read.csv('data/residuals.csv')
acf(data_snp$returns_sq)
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf(data_snp$returns_sq)
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf(data_snp$returns_sq)
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf(data_snp$returns_sq)
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf(data_snp$returns_sq)
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf_dax <- acf(resid$res_dax, main = 'ACF for daily DAX GARCH residuals')
acf_dax <- acf((resid$res_snp500 - mean(resid$res_snp500))^2, main = 'ACF for daily DAX squared GARCH residuals')
acf_dax <- acf((resid$res_snp500 - mean(resid$res_snp500))^2, main = 'ACF for daily DAX squared GARCH residuals')
acf_dax <- acf((resid$res_dax - mean(resid$res_dax))^2, main = 'ACF for daily DAX squared GARCH residuals')
acf_dax <- acf(data_dax$returns_sq, main = 'ACF for daily DAX squared returns')
acf_dax <- acf(data_dax$returns_sq, main = 'ACF for daily DAX squared returns')
acf_dax <- acf((resid$res_dax - mean(resid$res_dax))^2, main = 'ACF for daily DAX squared GARCH residuals')
acf(resid$res_snp500)
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf_snp <- acf(data_snp$returns, main = 'ACF for daily S&P500 returns')
acf_snp <- acf(data_snp$returns_sq, main = 'ACF for daily S&P500 squared returns')
acf((resid$res_snp500 - mean(resid$res_snp500))^2)
acf_dow <- acf((resid$res_dow - mean(resid$res_dow))^2, main = 'ACF for daily DOW squared GARCH residuals')
acf_dow <- acf(data_dow$returns_sq, main = 'ACF for daily DOW squared returns')
acf_snp <- acf((resid$res_snp500 - mean(resid$res_snp500))^2, main = 'ACF for daily S&P500 squared GARCH residuals')
acf_nq <- acf((resid$res_nq - mean(resid$res_nq))^2, main = 'ACF for daily NASDAQ squared  GARCH residuals')
acf_btc <- acf((resid$res_btc - mean(resid$res_btc))^2, main = 'ACF for daily BTC squared  GARCH residuals')
acf_crix <- acf((resid$res_crix- mean(resid$res_crix))^2, main = 'ACF for daily squared CRIX GARCH residuals')
acf_btc <- acf(data_btc$returns_sq, main = 'ACF for daily BTC squared  returns')
acf_btc <- acf(data_btc$returns_sq, main = 'ACF for daily BTC squared  returns')
acf_btc <- acf((resid$res_btc - mean(resid$res_btc))^2, main = 'ACF for daily BTC squared  GARCH residuals')
acf_btc <- acf(data_btc$returns_sq, main = 'ACF for daily BTC squared  returns')
acf_dax <- acf(data_dax$returns_sq, main = 'ACF for daily DAX squared returns')
acf_dax <- acf((resid$res_dax - mean(resid$res_dax))^2, main = 'ACF for daily DAX squared GARCH residuals')
acf_dax <- acf(data_dax$returns_sq, main = 'ACF for daily DAX squared returns')
acf_dow <- acf((resid$res_dow - mean(resid$res_dow))^2, main = 'ACF for daily DOW squared GARCH residuals')
acf_dow <- acf(data_dow$returns_sq, main = 'ACF for daily DOW squared returns')
acf_snp <- acf((resid$res_snp500 - mean(resid$res_snp500))^2, main = 'ACF for daily S&P500 squared GARCH residuals')
acf_snp <- acf(data_snp$returns_sq, main = 'ACF for daily S&P500 squared returns')
acf_nq <- acf((resid$res_nq - mean(resid$res_nq))^2, main = 'ACF for daily NASDAQ squared  GARCH residuals')
acf_nq <- acf(data_nq$returns_sq, main = 'ACF for daily NASDAQ squared  returns')
acf_btc <- acf(data_btc$returns_sq, main = 'ACF for daily BTC squared  returns')
acf_btc <- acf((resid$res_btc - mean(resid$res_btc))^2, main = 'ACF for daily BTC squared  GARCH residuals')
jpeg('acf2_res_dow.jpg')
acf_dow <- acf((resid$res_dow - mean(resid$res_dow))^2, main = 'ACF for daily DOW squared GARCH residuals')
dev.off()
jpeg('acf2_res_snp.jpg')
acf_snp <- acf((resid$res_snp500 - mean(resid$res_snp500))^2, main = 'ACF for daily S&P500 squared GARCH residuals')
dev.off()
jpeg('acf2_res_nq.jpg')
acf_nq <- acf((resid$res_nq - mean(resid$res_nq))^2, main = 'ACF for daily NASDAQ squared  GARCH residuals')
dev.off()
acf_dow <- acf((resid$res_dow - mean(resid$res_dow))^2, main = 'ACF for daily DOW squared GARCH residuals')
acf_dax <- acf((resid$res_dax - mean(resid$res_dax))^2, main = 'ACF for daily DAX squared GARCH residuals')
acf_dax <- acf(data_dax$returns_sq, main = 'ACF for daily DAX squared returns')
jpeg('acf2_res_dax.jpg')
acf_dax <- acf((resid$res_dax - mean(resid$res_dax))^2, main = 'ACF for daily DAX squared GARCH residuals')
dev.off()
